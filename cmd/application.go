package cmd

import (
	"maps"

	"github.com/shibataka000/gh-release-install/external"
	"github.com/shibataka000/gh-release-install/github"
)

// newApplicationService returns a new [github.com/shibataka000/gh-release-install/github.ApplicationService] object.
func newApplicationService(token string, repoFullName string) (*github.ApplicationService, error) {
	assetRepository, err := newAssetRepository(token, repoFullName)
	if err != nil {
		return nil, err
	}
	execBinaryRepository := github.NewExecBinaryRepository()
	return github.NewApplicationService(assetRepository, execBinaryRepository), nil
}

// newApplicationService returns a new [github.com/shibataka000/gh-release-install/github.IAssetRepository] object.
// If release assets of given repository are hosted on GitHub, this returns [github.com/shibataka000/gh-release-install/github.AssetRepository] object.
// If release assets of given repository are hosted on server outside from GitHub, this returns [github.com/shibataka000/gh-release-install/external.AssetRepository] object.
func newAssetRepository(token string, repoFullName string) (github.IAssetRepository, error) {
	isExternal, err := external.Exists(repoFullName)
	if err != nil {
		return nil, err
	}
	if isExternal {
		return external.NewAssetRepository(), nil
	}
	return github.NewAssetRepository(token), nil
}

// defaultPatterns returns default patterns.
// These are generated by joining [github.com/shibataka000/gh-release-install/github.DefaultPatterns] and [github.com/shibataka000/gh-release-install/external.DefaultPatterns].
func defaultPatterns() map[string]string {
	m := map[string]string{}
	maps.Copy(m, github.DefaultPatterns)
	maps.Copy(m, external.DefaultPatterns)
	return m
}
